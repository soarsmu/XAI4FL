# -*- coding: utf-8 -*-
"""Dalex-testing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1aBwjZCdfe2MbPzFRY9TjRfbSFJq2htbU
"""

#Be sure to install the dalex package using pip

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
import json
import re
import ast
import dalex
import sys
import numpy as np

def process_spectra(file_obj, file_name):
    file_string = str(file_obj[file_name])

    return file_string.split("\\n")

def process_matrix(file_obj, file_name):
    file_string = str(file_obj[file_name])

    result = file_string.split("\\n")
    result[0] = result[0].replace("b'", "")

    for i in range(len(result)):
        result[i] = result[i].split(" ")
        result[i] = [int(x) if x.isdigit() else x for x in result[i]]
        lastel = result[i][-1]
        if lastel == "+":
            result[i][-1] = "PASS"
        elif lastel == "-":
            result[i][-1] = "FAIL"
    
    return result

#Input and process files into dataframe

f = open(sys.argv[1], "r")
spectra_list = [line.rstrip('\n') for line in f]
spectra_list.append("Pass/Fail")
f.close()

#Case if there are duplicate in list
seen = {}
for i, x in enumerate(spectra_list):
    if x not in seen:
        seen[x] = 1
    else:
        seen[x] += 1
        num = seen[x]
        temp = x.split('#')
        temp_name = temp[0] + str(num)+ '#' + temp[1]
        spectra_list[i] = temp_name 


df = pd.read_csv(sys.argv[2], sep=' ', names=spectra_list, header=None)
df = df.replace(["-","+"], ["FAIL","PASS"])

#Split dataframe into variables and classes as well as handle any insufficient data

x = df[spectra_list[:len(spectra_list)-1]]
y = df["Pass/Fail"]

fails = []
passes = []
i = 0
for result in y:
    if result == "FAIL":
        fails.append(i)
    else:
        passes.append(i)
    i += 1

if len(fails) == 1:
    df = df.append(df.iloc[fails[0]], ignore_index=True)
    x = df[spectra_list[:len(spectra_list)-1]]
    y = df["Pass/Fail"]

if (df.shape[0] < 6):
    df = df.append(df)
    x = df[spectra_list[:len(spectra_list)-1]]
    y = df["Pass/Fail"]

x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, stratify=y, random_state=1)

#Declare and train the model

model = RandomForestClassifier(n_estimators=100, bootstrap=True, max_features='sqrt', random_state=1)

model.fit(x_train, y_train)

#Declare DALEX explainer object

exp_dalex = dalex.Explainer(model, data=x_train, y=y_train, model_type="classification")

#Explain variable's contribution using Dalex breakdown plot approach

breakdown_fail = exp_dalex.predict_parts(x.iloc[18], type="break_down")
breakdown_fail_interaction = exp_dalex.predict_parts(x.iloc[18], type="break_down_interactions")

dalex_lines = {}

for index, row in breakdown_fail.result.iterrows():
    if index == 0 or index == len(breakdown_fail.result) - 1:
        continue
    dalex_lines[row['variable_name']] = row['contribution']

#Write output file
with open(sys.argv[3]+"_dalex.txt", "w") as file:
    for i in dalex_lines:
        file.write(str(i) + ";" + str(dalex_lines[i]) + "\n")
